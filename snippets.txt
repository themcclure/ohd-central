# Quick test load from console
import ohd, datetime, time
ohd.config.cred_file='./service-account.json'
ohd.config.google_api_delay = 1

register_id = '1mH2Sui25qqrGt0x8k_KuL1BONsZ3rOPCIurECnX3Jxw'  # real test register
tab_name = 'Test History Register'
# tab_name = 'History Register'

start = datetime.datetime.now()
olist = ohd.load_register(doc_id=register_id, tab_name=tab_name, cred_file=ohd.config.cred_file)
o = list()
for off in ohd.register.ohd_conn_generator(olist, cred_file=ohd.config.cred_file):
    otemp = ohd.register.load_official(off)
    if otemp:
        o.append(otemp)
    else:
        print(u"This document wasn't loaded {}".format(off.doc_id))

print u'Officials loaded, there are {} in the list, for a total of {} games'.format(len(o), reduce(lambda x, y: x+y, [len(x.games) for x in o]))
print u'Officials loaded, there are {} in the list, {}% with game errors'.format(len(o), round(reduce(lambda x, y: x+y, [1 for x in o if x.games_with_errors_count > 0])*1.0/len(o)*100.0,0))
step = datetime.datetime.now()
print u'Full loading took {}'.format(step - start)
query_string = [{'standard': [True], 'assn': ['WFTDA', 'MRDA']},
                {'type': ['Other'], 'role': ['THR', 'ATHR', 'THSNO', 'ATHNSO']},
                {"start": start.date(), "interval": 12, "max_interval": 5}]
for off in o:
    qgames = ohd.util.query_history(off.positions, *query_string)
    if len(qgames[0]) > 0:
        print u'{}\'s breakdown of {} is {}'.format(off.pref_name, qgames[0][0].__class__, map(len, qgames))
    else:
        print u'{} has an empty games history'.format(off.pref_name)
print u'Processing took an extra {}'.format(datetime.datetime.now() - step)



# Code snippet for interacting with the loaded Official objects
import ohd, datetime
start = datetime.datetime.now()
locations = ohd.util.load_locations(cred_file='./service-account.json')
ohd.config.locations = locations
print u'Locations took {}'.format(datetime.datetime.now() - start)
o = ohd.load_register()
ohd.config.officials = o
print u'Officials + Locations took {}'.format(datetime.datetime.now() - start)
# some "qualifying" query for games
query_string = [{'standard': [True], 'assn': ['WFTDA', 'MRDA']},
                {'type': ['Other'], 'role': ['THR', 'ATHR', 'THSNO', 'ATHNSO']},
                {"start": start.date(), "interval": 12, "max_interval": 5}]
qgames = ohd.util.query_history(o[0].positions, *query_string)
print u'Query + Officials + Locations took {}'.format(datetime.datetime.now() - start)



### FUZZY STRING MATCHING STUFF
# https://marcobonzanini.com/2015/02/25/fuzzy-string-matching-in-python/
from fuzzywuzzy import process
# doing my own tokenization improves the quality of the result
def match_league(league, list=ohd.config.locations):
    tokens_common_words = ['Derby', 'Girls', 'Rollers', 'Roller', 'Rollergirls']
    loc_names = [k for k,v in list.items()]
    return process.extractOne(' '.join(set(league.split(' ')) - set(tokens_common_words)), loc_names, scorer=fuzz.token_set_ratio)


### GEO STUFF
from geopy.distance import vincenty as distance
google_api = ohd.util.connect_to_geocode_api()
l1 = google_api.geocode(','.join(["Seattle", "WA", "USA"]))
l2 = google_api.geocode(','.join(["Ghent", "", "Belgium"]))
distance(l1.point,l2.point)


# Filter list of object to find matching patterns:
is_cert = lambda x: True if x.refcert != 0 or x.nsocert != 0 else False
is_refcert = lambda x: True if x.refcert != 0 else False
is_nsocert = lambda x: True if x.nsocert != 0 else False
fo = filter(is_cert, o)

# who's local?
local_tolerance = 5000
host_location = google_api.geocode("Manchester, UK")
is_local_official = lambda x: True if x.locationref != (0,0) and distance(x.locationref, host_location.point).miles < local_tolerance else False
locals = filter(is_local_official, o)

# which leagues are local?
local_tolerance = 500
{ k:v for k,v in locations.items() if v[3] and distance(v[3], host.point).miles < local_tolerance }



# get a list of events in a list of officials
[x.events.keys() for x in o]



# manually step through a dict
k, v = dictobj.popitem()


#
# Weight model notes
possibly a sheet that lists:
{inclusion} | {exclusinon} | age period (timedelta? or months?) | weight of first age period | ... | weight of last age period |

then it can go through row by row and calculate per family and per position values?

V COMPLEX!
